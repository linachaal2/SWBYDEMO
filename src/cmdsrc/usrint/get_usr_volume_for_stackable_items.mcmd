<command>
  <name>get usr volume for stackable items</name>
  <description>get usr volume for stackable items</description>
  <type>Local Syntax</type>
  <local-syntax>
<![CDATA[
/* get usr volume for stackable items
 * Version history:
 *  2022-03-22 Radina Ivanova    Initial version
 *  2022-09-07 Radina Ivanova    Volume calculations of picks based on pick lists
 *  2022-09-16 Radina Ivanova    Handle combined picks
 *  2022-01-23 Radina Ivanova    Support allow splitting of picks
 *  2023-04-24 Radina Ivanova    Split pick only if the volume is above a threshold percentage from the shelve volume
 */

[[
    res.addColumn("surface", MocaType.DOUBLE);
    while (res.next())
    {
        res.setValue("surface", res.getDouble("pd2_len")*res.getDouble("pd2_wid"));
    }
    res.reset();
    return res;
]] >> res
|
sort result set
where rs = @res
  and sort_list = 'group_by_combined,surface desc,wrkref' >> res
|
[[

    double max_height = asset_hgt; 
    String group_by_combined = "";
    double current_volume_of_group = 0.0;
    double current_height_of_stack = 0.0;
    double current_width_of_stack = 0.0;
    double current_length_of_stack = 0.0;
    double pick_volume = 0.0;
    int row_number = 0;
    boolean allowSplitting = (allow_split_flg != null ? allow_split_flg : false);
    int split_percentage = (split_percentage != null ? split_percentage : 100);
    boolean start_new_list = false;
    
    ArrayList pickLists = new ArrayList();
    ArrayList processedPicks = new ArrayList();
    PickList currentPickList;

    while (res.next())
    {
        if (processedPicks.contains(res.getString("wrkref")))
        {
            res.setValue("totvol", pick_volume);
            res.setValue("intvol", pick_volume);
            row_number++;
            continue;
        }
        processedPicks.add(res.getString("wrkref"));
        
        pick_volume = 0.0;
        start_new_list = false;
        int currentRemainingQuantity = (int)((asset_max_vol - current_volume_of_group) / (res.getDouble("pd2_wid") * res.getDouble("pd2_len") * max_height)) * (int)(max_height / res.getDouble("pd2_hgt"));
                    
        if (!res.getString("group_by_combined").equals(group_by_combined) || currentRemainingQuantity < res.getInt("pckqty"))
        {
        
            /* check if it is possible to split pick and add to the current list */
            boolean splitSuccessful = false;

            if (allowSplitting && currentRemainingQuantity < res.getInt("pckqty"))
            {
                /* calculate split quantity */
                int minSplitQuantity = (int)((asset_max_vol * split_percentage/100.0) / (res.getDouble("pd2_wid") * res.getDouble("pd2_len") * max_height)) * (int)(max_height / res.getDouble("pd2_hgt"));
                
                
                /* check if the pick is above the threshold percentage for splitting */
                if (res.getInt("pckqty") > minSplitQuantity)
                {
                    
                    int splitQuantity = 0;
                    if (minSplitQuantity > currentRemainingQuantity) {
                        splitQuantity = (int)((asset_max_vol) / (res.getDouble("pd2_wid") * res.getDouble("pd2_len") * max_height)) * (int)(max_height / res.getDouble("pd2_hgt"));
                        if(splitQuantity >= res.getInt("pckqty")) {
                            splitQuantity = 0;
                        }
                        start_new_list = true;
                    }
                    else{
                        splitQuantity = currentRemainingQuantity;
                    }
                    
                    if (splitQuantity > 0)
                    {
                        SimpleResults new_pckwrk_res;
                        new_pckwrk_res = moca.executeCommand("split usr pick work " +
                                                             "where src_wrkref = '" + res.getString("wrkref") + "' " +
                                                             "  and split_qty = " + splitQuantity +
                                                             "  and remqty = " + (res.getInt("pckqty") - splitQuantity));
                        
                        new_pckwrk_res.next();
                        new_pckwrk_res.setValue("group_by_combined", res.getString("group_by_combined"));
                        new_pckwrk_res.setValue("order_by_combined", res.getString("order_by_combined"));
                        
                        res.setValue("pckqty", splitQuantity);
                        res.setValue("dtl_pckqty", splitQuantity);
                        res.setValue("totvol", res.getDouble("pd2_len")*res.getDouble("pd2_wid")*res.getDouble("pd2_hgt")*(res.getInt("pckqty")/res.getInt("pd2_qty")));
                        res.setValue("intvol", res.getDouble("pd2_len")*res.getDouble("pd2_wid")*res.getDouble("pd2_hgt")*(res.getInt("pckqty")/res.getInt("pd2_qty")));
                        res.setValue("totwgt", res.getDouble("pd2_grswgt")*(res.getInt("pckqty")/res.getInt("pd2_qty")));
                        
                        res.addRow();
                        res.setValue("pcksts", new_pckwrk_res.getString("pcksts"));
                        res.setValue("wrkref", new_pckwrk_res.getString("wrkref"));
                        res.setValue("wrkref_dtl", new_pckwrk_res.getString("wrkref_dtl"));
                        res.setValue("cmbcod", new_pckwrk_res.getString("cmbcod"));
                        res.setValue("wh_id", new_pckwrk_res.getString("wh_id"));
                        res.setValue("client_id", new_pckwrk_res.getString("client_id"));
                        res.setValue("lodlvl", new_pckwrk_res.getString("lodlvl"));
                        res.setValue("wrktyp", new_pckwrk_res.getString("wrktyp"));
                        res.setValue("pckqty", new_pckwrk_res.getInt("pckqty"));
                        res.setValue("untcas", new_pckwrk_res.getInt("untcas"));
                        res.setValue("dtl_pckqty", new_pckwrk_res.getInt("dtl_pckqty"));
                        res.setValue("group_by_combined", new_pckwrk_res.getString("group_by_combined"));
                        res.setValue("order_by_combined", new_pckwrk_res.getString("order_by_combined"));
                        res.setValue("kit_flg", new_pckwrk_res.getInt("kit_flg"));
                        res.setValue("cube_rem_flg", new_pckwrk_res.getInt("cube_rem_flg"));
                        res.setValue("start_pal_flg", new_pckwrk_res.getInt("start_pal_flg"));
                        res.setValue("thresh_pck_flg", new_pckwrk_res.getInt("thresh_pck_flg"));
                        res.setValue("src_pck_zone_id", new_pckwrk_res.getInt("src_pck_zone_id"));
                        res.setValue("schbat", new_pckwrk_res.getString("schbat"));            
                        res.setValue("ordnum", new_pckwrk_res.getString("ordnum")); 
                        res.setValue("ordlin", new_pckwrk_res.getString("ordlin")); 
                        res.setValue("ordsln", new_pckwrk_res.getString("ordsln")); 
                        res.setValue("wkonum", new_pckwrk_res.getString("wkonum")); 
                        res.setValue("wkolin", new_pckwrk_res.getString("wkolin")); 
                        res.setValue("subnum", new_pckwrk_res.getString("subnum")); 
                        res.setValue("prtnum", new_pckwrk_res.getString("prtnum")); 
                        res.setValue("stcust", new_pckwrk_res.getString("stcust")); 
                        res.setValue("list_id", new_pckwrk_res.getString("list_id")); 
                        res.setValue("pcklst_rule_id", new_pckwrk_res.getInt("pcklst_rule_id"));
                        res.setValue("pcklst_rule_name", new_pckwrk_res.getString("pcklst_rule_name")); 
                        res.setValue("asset_typ", new_pckwrk_res.getString("asset_typ")); 
                        res.setValue("pd1_qty", new_pckwrk_res.getInt("pd1_qty"));
                        res.setValue("pd1_len", new_pckwrk_res.getDouble("pd1_len"));
                        res.setValue("pd1_wid", new_pckwrk_res.getDouble("pd1_wid"));
                        res.setValue("pd1_hgt", new_pckwrk_res.getDouble("pd1_hgt"));
                        res.setValue("pd1_grswgt", new_pckwrk_res.getDouble("pd1_grswgt"));
                        res.setValue("pd2_qty", new_pckwrk_res.getInt("pd2_qty"));
                        res.setValue("pd2_len", new_pckwrk_res.getDouble("pd2_len"));
                        res.setValue("pd2_wid", new_pckwrk_res.getDouble("pd2_wid"));
                        res.setValue("pd2_hgt", new_pckwrk_res.getDouble("pd2_hgt"));
                        res.setValue("pd2_grswgt", new_pckwrk_res.getDouble("pd2_grswgt"));
                        
                        res.setValue("totvol", new_pckwrk_res.getDouble("pd2_len")*new_pckwrk_res.getDouble("pd2_wid")*new_pckwrk_res.getDouble("pd2_hgt")*(new_pckwrk_res.getInt("pckqty")/new_pckwrk_res.getInt("pd2_qty")));
                        res.setValue("intvol", new_pckwrk_res.getDouble("pd2_len")*new_pckwrk_res.getDouble("pd2_wid")*new_pckwrk_res.getDouble("pd2_hgt")*(new_pckwrk_res.getInt("pckqty")/new_pckwrk_res.getInt("pd2_qty")));
                        res.setValue("totwgt", new_pckwrk_res.getDouble("pd2_grswgt")*(new_pckwrk_res.getInt("pckqty")/new_pckwrk_res.getInt("pd2_qty")));
                        res.setValue("caswgt", new_pckwrk_res.getDouble("caswgt"));
                        res.setValue("extvol",0.0);
                        res.setValue("surface", new_pckwrk_res.getDouble("pd2_len")*new_pckwrk_res.getDouble("pd2_wid"));
                        
                        res = sortResultSet(res, "group_by_combined,surface desc,wrkref");
                        res.setRow(row_number);
                        splitSuccessful = true;
                    }
                }
            }
        
            if (!splitSuccessful || start_new_list)
            {
                                  
                /* switching to another group or start new list/shelve for the same group, reset values and top up height of last pick*/
                /* find if we can fit the pick in an existing list  or we need to create a new list */
                currentPickList = null;
                for (int i = 0; i < pickLists.size; i++)
                {
                    if (res.getString("group_by_combined").equals(pickLists[i].group_by_combined) &&
                        pickLists[i].current_volume_of_group + res.getDouble("pd2_len")*res.getDouble("pd2_wid")*res.getDouble("pd2_hgt")*(res.getInt("pckqty")/res.getInt("pd2_qty")) <= asset_max_vol)
                    {
                        currentPickList = pickLists[i];
                        group_by_combined = res.getString("group_by_combined");
                        current_volume_of_group = pickLists[i].current_volume_of_group;
                        current_height_of_stack = pickLists[i].current_height_of_stack;
                        current_width_of_stack = pickLists[i].current_width_of_stack;
                        current_length_of_stack = pickLists[i].current_length_of_stack;

                        break;
                    }
                }
                
                if (currentPickList == null)
                {
                    currentPickList = new PickList();
                    currentPickList.group_by_combined = res.getString("group_by_combined");
                    pickLists.add(currentPickList);
                    
                    group_by_combined = res.getString("group_by_combined");
                    current_volume_of_group = 0.0;
                    current_height_of_stack = 0.0;
                    current_width_of_stack = res.getDouble("pd2_wid");
                    current_length_of_stack = res.getDouble("pd2_len");
                }
            }
        }
        
            
        /* Add pick to stack 1 by 1 quantity */
        for (int i = 1 ; i <= (res.getInt("pckqty")/res.getInt("pd2_qty")) ; i++)
        {
            if (current_height_of_stack + res.getDouble("pd2_hgt") >  max_height || current_height_of_stack == 0.0)
            {
                /* start new stack, reset height and top up height of pick */
                if (current_height_of_stack > 0)
                {
                    if (i == 1)
                    {
                        /* starting with this pick is over the top of the stack, we need to top up the previous pick */
                        res.setRow(currentPickList.lastPickIndex);
                        res.setValue("totvol", res.getDouble("totvol")+ current_width_of_stack*current_length_of_stack*(max_height - current_height_of_stack));
                        res.setValue("intvol", res.getValue("totvol"));
                              
                        res.setRow(row_number);
                    }
                    else
                    {
                        /* we are over the top of the stack in the middle of the pick, we need to top up the current pick and continue on a new stack */
                        pick_volume += current_width_of_stack*current_length_of_stack*(max_height - current_height_of_stack);
                    }
                }
                current_width_of_stack = res.getDouble("pd2_wid");
                current_length_of_stack = res.getDouble("pd2_len");
                current_height_of_stack = res.getDouble("pd2_hgt");
                
            }
            else
            {
                current_height_of_stack += res.getDouble("pd2_hgt");
            }
            
            pick_volume += current_width_of_stack*current_length_of_stack*res.getDouble("pd2_hgt");
        }
        
        current_volume_of_group +=  pick_volume;
        
        res.setValue("totvol", pick_volume);
        res.setValue("intvol", pick_volume);
        
        currentPickList.current_volume_of_group = current_volume_of_group;
        currentPickList.current_height_of_stack = current_height_of_stack;
        currentPickList.current_width_of_stack = current_width_of_stack;
        currentPickList.current_length_of_stack = current_length_of_stack;
        currentPickList.lastPickIndex = row_number;
        
        moca.executeCommand("publish data " +
                             "where wrkref = '" + res.getString("wrkref") + "' " +
                              "  and pckqty = " + res.getInt("pckqty") +
                              "  and totvol = " + res.getDouble("totvol") +
                              "  and current_volume_of_group = " + current_volume_of_group +
                              "  and asset_max_vol = " + asset_max_vol);
        
        row_number++;
    }
    
    /* for each last pick on a pick list, we need to top up the stack */
    for (int i = 0; i < pickLists.size; i++)
    {
        res.setRow(pickLists[i].lastPickIndex);
        res.setValue("totvol", res.getDouble("totvol")+ pickLists[i].current_width_of_stack*pickLists[i].current_length_of_stack*(max_height - pickLists[i].current_height_of_stack));
        res.setValue("intvol", res.getValue("totvol"));
    }

    res.reset();
    return res;
    
    class PickList {
        String group_by_combined = "";
        double current_volume_of_group = 0.0;
        double current_height_of_stack = 0.0;
        double current_width_of_stack = 0.0;
        double current_length_of_stack = 0.0;
        int lastPickIndex = 0;
    }
    
    public MocaResults sortResultSet(MocaResults results, String sortList) {
        SimpleResults sortedResults = new SimpleResults();
        String[] sortListSplit = sortList.split(",");
        String[] sortColumns = new String[sortListSplit.length];
        Comparator[] comparators = new Comparator[sortListSplit.length];
        for (int i = 0; i < sortListSplit.length; ++i) {
            String columnDeclaration = sortListSplit[i].trim();
            int firstSpace = columnDeclaration.indexOf(32);
            if (firstSpace != -1) {
                String descending;
                sortColumns[i] = columnDeclaration.substring(0, firstSpace);
                if (firstSpace >= columnDeclaration.length() - 1 || !(descending = columnDeclaration.substring(firstSpace + 1, columnDeclaration.length())).matches("^\\s*[Dd].*")) continue;
                comparators[i] = new Comparator<Object>(){

                    @Override
                    public int compare(Object o1, Object o2) {
                        if (o1 instanceof Comparable && o2 instanceof Comparable) {
                            return -1 * ((Comparable)o1).compareTo(o2);
                        }
                        return 0;
                    }
                };
                continue;
            }
            sortColumns[i] = columnDeclaration;
        }
        MocaUtils.copyResults((EditableResults)sortedResults, results);
        return sortedResults.sort(sortColumns, comparators);
    }
]] 

]]>
</local-syntax>
</command>