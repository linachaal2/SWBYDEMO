<command>
  <name>close usr train</name>
  <description>close usr train</description>
  <type>Local Syntax</type>
  <local-syntax>
<![CDATA[
/* close usr train
 * Command used to Close Trains on inbound process
 * Version history: 
 * 2018-25-01 - Petr Babaian(JDA) - Initial Version
 * 2019-03-18 - Tim van den Akker - wh_id was hardcoded, now made dymaic with @wh_id
 * 2019-04-25 - Salem Hamze     Removed last load activity for location check, changed the strings to numbers where applicable
 */
/* Validation of all needed variables to process this commnand.
 * WH_ID - Warehouse ID on which the command is being processed
 * DEVCOD - Device Code from RF or JOB
 * STOLOC - Storage Location
 * CLOSE_TYPE - Type of process which is using this command.
 *              : job      = job USR-CLOSE-TRAINS 
 *              : manual   = Function KEY on RF used by user to Close Trains
 *              : close    = Build/Add Trains (move inventory trigger) 
 *              : location = Change location process
 */
validate stack variable not null
 where name = 'close_type'
|
if (@close_type <> 'job')
{
    validate stack variable not null
     where name = 'wh_id'
    |
    validate stack variable not null
     where name = 'devcod'
    |
    validate stack variable not null
     where name = 'stoloc'
    |
    /*Section for close_type = manual*/
    if (@close_type = 'manual')
    {
        /*Check policy INACTIVITY-TIME*/
        [select rtnum1 inactivity_time
           from poldat_view
          where polcod = 'USR-RECEIVING'
            and polvar = 'TRAIN'
            and polval = 'INACTIVITY-TIME'
            and wh_id = @wh_id] catch(-1403)
        |
        /*If policy INACTIVITY-TIME exists and RTNUM1 is not 0 then continue else do nothing*/
        if (@? != -1403 and @rtnum1 <> 0)
        {
            /*Get MOVE_ZONE_CODE value used in Policy*/
            [select mz.mov_zone_cod
               from locmst lm
               join mov_zone mz
                 on mz.mov_zone_id = lm.mov_zone_id
              where lm.stoloc = @stoloc
                and lm.wh_id = @wh_id] catch(-1403)
            |
            /*If mov_zone_cod exists then continue,else do nothing*/
            if (@? != -1403)
            {
                /*Check MOVE_ZONE_CODE policy, if stoloc is in movement zone enabled for trains*/
                list policies
                 where polcod = 'USR-RECEIVING'
                   and polvar = 'TRAIN'
                   and polval = 'MOV-ZONE-COD'
                   and rtstr1 = @mov_zone_cod
                   and rtnum1 = 1 catch(-1403)
                |
                /*If Policy returns value then continue, else do nothing*/
                if (@? != -1403)
                {
                    /*Check if stoloc has open Trains*/
                    [select distinct count(inl.uc_train_id) open_trains
                       from invdtl ind
                       join invsub ins
                         on ins.subnum = ind.subnum
                       join invlod inl
                         on inl.lodnum = ins.lodnum
                      where inl.stoloc = @stoloc
                        and inl.wh_id = @wh_id
                        and inl.uc_train_cls_flg <> '1']
                    |
                    /*If there are no open Trains then send MSG - No Open Trains else continue*/
                    if (@open_trains = 0)
                    {
                        set return status
                         where status = 90020
                    }
                    else
                    {
                        /*Check if nobody else is working on the location*/
                        /*Get number of users working on the same location for time bigger then defined in policy
                         * Only different devcod(s) are counted.
                         */
                        [select count(devcod) users_in_aisle
                           from rftmst
                          where devcod in (select devcod
                                             from rftmst
                                            where devcod <> @devcod
                                              and curstoloc = @stoloc
                                            group by devcod
                                           having datediff(mi, max(rftmst.actdte), sysdate) < @inactivity_time)] catch(-1403)
                        |
                        /*If there is nobody working train(s) will be closed else MSG - Cannot Close - Other people are working*/
                        if (@users_in_aisle = 0)
                        {
                            [update invlod
                                set uc_train_cls_flg = 1
                              where wh_id = @wh_id
                                and stoloc = @stoloc
                                and uc_train_id is not null
                                and uc_train_cls_flg = 0] catch(@?)
                        }
                        else
                        {
                            set return status
                             where status = 90021
                        }
                    }
                }
            }
        }
    }
    /*Section for close_type = close
     * No checking logic needed in this process.
     */
    else if (@close_type = 'close')
    {
        [update invlod
            set uc_train_cls_flg = 1
          where wh_id = @wh_id
            and stoloc = @stoloc
            and uc_train_id is not null
            and uc_train_cls_flg = 0] catch(@?)
    }
    /*Section for close_type = location*/
    else if (@close_type = 'location')
    {
        /*Check policy INACTIVITY-TIME*/
        [select rtnum1 inactivity_time
           from poldat_view
          where polcod = 'USR-RECEIVING'
            and polvar = 'TRAIN'
            and polval = 'INACTIVITY-TIME'
            and wh_id = @wh_id] catch(-1403)
        |
        /*If policy INACTIVITY-TIME exists and RTNUM1 is not 0 then continue else do nothing*/
        if (@? != -1403 and @rtnum1 <> 0)
        {
            /*Get aisle_id for stoloc and enabled move zone policy, to be able to check all locations for same aisle_id (group)*/
            [select distinct locmst.aisle_id,
                    invlod.stoloc
               from invlod
               join locmst
                 on locmst.stoloc = invlod.stoloc
              where invlod.stoloc in (select distinct stoloc
                                        from locmst
                                       where wh_id = @wh_id
                                         and stoloc = @stoloc
                                         and mov_zone_id in (select mov_zone_id
                                                               from mov_zone
                                                              where wh_id = @wh_id
                                                                and mov_zone_cod in (select rtstr1 mov_zone_cod
                                                                                       from poldat_view
                                                                                      where polcod = 'USR-RECEIVING'
                                                                                        and polvar = 'TRAIN'
                                                                                        and polval = 'MOV-ZONE-COD'
                                                                                        and rtnum1 = 1)))
                and invlod.uc_train_id is not null
                and invlod.uc_train_cls_flg <> 1
                and invlod.wh_id = @wh_id] catch(-1403)
            |
            /*If there is no available aisle, do nothning else continue*/
            if (@? != -1403)
            {
                /*Get STOLOC which is inactive with or without user*/
                [select invlod.stoloc stoloc_to_close
                   from invlod
                   join locmst
                     on locmst.stoloc = invlod.stoloc
                  where nvl(locmst.aisle_id, 'NA') = NVL(@aisle_id, 'NA')
                    and invlod.wh_id = @wh_id
                    and invlod.uc_train_id is not null
                    and invlod.uc_train_cls_flg <> 1
                    and invlod.stoloc not in (select distinct rftmst.curstoloc
                                                from rftmst
                                                join locmst
                                                  on locmst.stoloc = rftmst.curstoloc
                                               where NVL(locmst.aisle_id, 'NA') = NVL(@aisle_id, 'NA')
                                                 and locmst.wh_id = @wh_id
                                               group by rftmst.curstoloc
                                              having datediff(mi, max(rftmst.actdte), sysdate) < @inactivity_time)
                  group by invlod.stoloc] catch(-1403)
                |
                if (@? != -1403)
                {
                    /*If there is no location returned, do nothning else close train(s) in all location(s)*/
                    [update invlod
                        set uc_train_cls_flg = 1
                      where wh_id = @wh_id
                        and stoloc = @stoloc
                        and uc_train_id is not null
                        and uc_train_cls_flg = 0] catch(@?)
                }
            }
        }
    }
}
/*Section for close_type = job*/
else if (@close_type = 'job')
{
    validate stack variable not null
     where name = 'wh_id'
    |
    validate stack variable not null
     where name = 'stoloc'
    |
    /*Close open trains in locations passed from JOB*/
    [update invlod
        set uc_train_cls_flg = 1
      where wh_id = @wh_id
        and stoloc = @stoloc
        and uc_train_id is not null
        and uc_train_cls_flg = 0] catch(@?)
}
]]>
</local-syntax>
  <argument name="wh_id" required="yes" datatype="string">Warehouse ID</argument>
  <argument name="stoloc" required="yes" datatype="string">Storage Location</argument>
  <argument name="close_type" required="yes" datatype="string">Close Type</argument>
  <argument name="devcod" datatype="string">Device Code</argument>
</command>