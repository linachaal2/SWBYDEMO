name: Changed Files test

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      rollout_number:
        description: 'Rollout number'
        required: true
        default: '999'
      rollout_version:
        description: 'Rollout version'
        required: false
        default: ''

jobs:
  # -------------------------------------------------------------
  # Event `pull_request`: Returns all changed pull request files.
  # --------------------------------------------------------------
  changed_files:
    # NOTE:
    # - This is limited to pull_request* events and would raise an error for other events.
    # - A maximum of 3000 files can be returned.
    # - For more flexibility and no limitations see "Using local .git history" above.

    runs-on: self-hosted #ubuntu-latest 
    name: Test changed-files
    permissions:
      pull-requests: read

    steps:
      - name: Set enviroment
        shell: bash
        run: |
          echo "Path is ... $PATH"
          PATH=$PATH:$(which git)
          echo "Path is ... $PATH"
          echo "REPO: ${{ github.event.repository.name }}"  
          echo "OWNER: ${{ github.repository_owner }}"
          echo "Branch is ... ${{ github.head_ref }}"         
          echo "sha_short=$(git rev-parse --short "$GITHUB_SHA")" >> "$GITHUB_ENV"
          echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> "$GITHUB_ENV"
          echo "secret=second_value" >> "$GITHUB_ENV"
          export PR_BASE_SHA=${{ github.event.pull_request.base.sha }}
          echo "PR_BASE_SHA: $PR_BASE_SHA"
          echo "PR_BASE_SHA_SHORT=$(git rev-parse --short "$PR_BASE_SHA")"           
          export PR_HEAD_SHA=${{ github.event.pull_request.head.sha }}
          echo "PR_HEAD_SHA: $PR_HEAD_SHA"
          echo "PR_HEAD_SHA_SHORT=$(git rev-parse --short "$PR_HEAD_SHA")"         
          echo "GITHUB_SHA: $GITHUB_SHA"
          echo "GITHUB_SHA_SHORT=$(git rev-parse --short "$GITHUB_SHA")"           
          export PR_BASE_REF=${{ github.event.pull_request.base.ref }}
          echo "PR_BASE_REF: $PR_HEAD_REF"       
          export PR_HEAD_REF=${{ github.event.pull_request.head.ref }}
          echo "PR_HEAD_REF: $PR_HEAD_REF" 
          echo "git rev-parse ${{ github.sha }}^"
          echo "git rev-parse ${{ github.sha }}^@ | grep -Fvx ${{ github.event.pull_request.head.sha }}"
          #export LATEST_BASE_COMMIT=git rev-parse ${{ github.sha }}^@ | grep -Fvx ${{ github.event.pull_request.head.sha }}
          #echo "$LATEST_BASE_COMMIT"
          #git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }}
          #git diff --name-only "$GITHUB_BASE_REF..${{ github.head_ref }}"
           
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - uses: actions/github-script@v6
        with:
          script: |
            const { execSync } = require('child_process')
            const { commits } = context.payload.pull_request
            const rawFiles = execSync(`git diff --name-status HEAD HEAD~${commits}`).toString()
            const files = rawFiles.split('\n').filter(Boolean)
            console.log(files)       
      - uses: actions/checkout@v3
        with:
         fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}
      - name: Get changed files
        id: changed-files
        run: |
         if ${{ github.event_name == 'pull_request' }}; then
          echo "changed_files=$(git diff --name-only -r HEAD^1 HEAD | xargs)" >> $GITHUB_OUTPUT
         else
          echo "changed_files=$(git diff  --name-only ${{ github.event.before }} ${{ github.event.after }} | xargs)" >> $GITHUB_OUTPUT
         fi
      - name: List changed files
        run: |
          for file in ${{ steps.changed-files.outputs.changed_files }}; do
           echo "$file"
          done     
      - name: Create folder
        run: |
          [ -d ./rollout_gen/${{ github.head_ref }} ] && echo "Directory Exists" || mkdir ./rollout_gen/${{ github.head_ref }} 
           for file in ${{ steps.changed-files.outputs.changed_files }}; do
            cp $file ./rollout_gen/${{ github.head_ref }}/
           done 
      - name: Commit files
        run: |
         git config --local user.email "action@github.com"
         git config --local user.name "GitHub Action"
         git commit -m "Create packcage " -a
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
         github_token: ${{ secrets.GITHUB_TOKEN }}     
      - name: Read enviroment
        shell: bash
        run: |
          echo "BRANCH: ${{ env.branch }}"
          echo "SHA_SHORT: ${{ env.sha_short }}"
          echo "secret: ${{ env.secret }}"
          #perl HelloWorldPerl.pl ${{ env.branch }} ${{ env.sha_short }}
          
     
