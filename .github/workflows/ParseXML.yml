name: Parsing XML
on: workflow_dispatch

jobs:
  a:
    name: a
    runs-on: ubuntu-latest
    steps:
      - run: echo "A"
      - id: CurRolloutNumberEX
        run: |
         CURRENT_BRANCH_ROLLOUT_NUMBER="X"
         echo "CURRENT_BRANCH_ROLLOUT_NUMBER='X'" >> "$GITHUB_OUTPUT"
         echo "CURRENT_BRANCH_ROLLOUT_NUMBER : $CURRENT_BRANCH_ROLLOUT_NUMBER"
        #  echo "run_job_b='hello world'" >> $GITHUB_OUTPUT
    outputs:
      CURRENT_BRANCH_ROLLOUT_NUMBER: ${{ steps.CurRolloutNumberEX.outputs.CURRENT_BRANCH_ROLLOUT_NUMBER }}
  b:
    name: b
    runs-on: ubuntu-latest
    needs: a
    if: contains(needs.a.outputs.CURRENT_BRANCH_ROLLOUT_NUMBER, 'X')
    steps:
      - id: NewRolloutNumberEX
        run: |
         echo "B"
         NEW_BRANCH_ROLLOUT_NUMBER="100"
         echo "NEW_BRANCH_ROLLOUT_NUMBER='100'" >> "$GITHUB_OUTPUT"
         echo "NEW_BRANCH_ROLLOUT_NUMBER : $NEW_BRANCH_ROLLOUT_NUMBER"
    outputs:
      NEW_BRANCH_ROLLOUT_NUMBER: ${{ steps.NewRolloutNumberEX.outputs.NEW_BRANCH_ROLLOUT_NUMBER }}    
  c:
    name: c
    runs-on: ubuntu-latest
    needs: [a,b]
    if: always() && !cancelled() && contains(needs.*.result, 'success')
    steps:
      - run: |
         echo "C"
         if ${{ needs.b.outputs.NEW_BRANCH_ROLLOUT_NUMBER != '' }}; then
          echo "NEW ROLLOUT_NUMBER_VALUE is created"
          echo "ROLLOUT_NUMBER_VALUE=${{needs.b.outputs.NEW_BRANCH_ROLLOUT_NUMBER}}"  
         else
          echo "Current ROLLOUT_NUMBER_VALUE"
          echo "ROLLOUT_NUMBER_VALUE=${{needs.a.outputs.CURRENT_BRANCH_ROLLOUT_NUMBER}}"
         fi 
    # - run: echo ${{needs.a.outputs.CURRENT_BRANCH_ROLLOUT_NUMBER}}
    #  - run: echo ${{needs.b.outputs.NEW_BRANCH_ROLLOUT_NUMBER}}

#########################################################################################
#                      GetBranchRolloutNumberJob                                        #
#########################################################################################
    
  GetBranchRolloutNumberJob:
    name: GetBranchRolloutNumberJob
    runs-on: macos-latest #ubuntu-latest #ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        perl-version:
          - 'latest'
    permissions:
      pull-requests: write
      contents: write
      
    concurrency:
      group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
      cancel-in-progress: true  
    
    steps:
    - uses: actions/checkout@v4
      with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0 
          
    # Save Branch Name, branch name will be used later if we switch to main branch       
    - name:  Current Branch Name 
      id: CurrentBranchName
      shell: bash
      run: |  
          echo "BRANCH_NAME=${{ github.head_ref }}"  >> $GITHUB_OUTPUT
    - name:  Print Branch Name 
      shell: bash
      run: |  
          echo "BRANCH_NAME=${{ steps.saveBranchName.outputs.BRANCH_NAME }}"    
          
    # Validate the rollout number for current branch
    - name: Parse BranchRolloutNumber XML
      id: getCurrentBranchRolloutNumber
      uses: mavrosxristoforos/get-xml-info@1.0
      with:
        xml-file: 'scripts/rollout_gen/generic/BranchRolloutNumber.xml'
        xpath: '//branch_rollout_number'
    - name: Print Current Branch Rollout Number
      id: CurrentBranchRolloutNumber
      shell: bash
      run: |   
         echo "Current Branch Rollout Number: ${{ steps.getCurrentBranchRolloutNumber.outputs.info }}"
         echo "CURRENT_BRANCH_ROLLOUT_NUMBER = ${{ steps.getCurrentBranchRolloutNumber.outputs.info }}"  >> $GITHUB_OUTPUT
         echo "CURRENT_BRANCH_ROLLOUT_NUMBER : $CURRENT_BRANCH_ROLLOUT_NUMBER"
    outputs:
      CURRENT_BRANCH_ROLLOUT_NUMBER: ${{ steps.CurrentBranchRolloutNumber.outputs.CURRENT_BRANCH_ROLLOUT_NUMBER }}
     # BRANCH_NAME: ${{ steps.CurrentBranchName.outputs.BRANCH_NAME }}
     

#########################################################################################
#                      GettingANewRolloutNumberJob                                      #
#########################################################################################
  GettingANewRolloutNumberJob:
    name: GettingANewRolloutNumberJob
    needs: GetBranchRolloutNumberJob
    if: contains(needs.GetBranchRolloutNumberJob.outputs.CURRENT_BRANCH_ROLLOUT_NUMBER,'X')
    runs-on: macos-latest
    steps:
      - name: Check out the repository to the runner
        uses: actions/checkout@v4
      - run: echo  ${{needs.GetBranchRolloutNumberJob.outputs.CURRENT_BRANCH_ROLLOUT_NUMBER}}
     # checkout main branch 
      
    #brew install libxml2
   # - name: Update Homebrew formula
   #   uses: dawidd6/action-homebrew-bump-formula@v3
   #   with:
        # Required, custom GitHub access token with the 'public_repo' and 'workflow' scopes
   #     token: ${{ secrets.ACTIONS_KEY }}
   #     formula: libxml2
      - name: perl info
        run: |
          perl --version
      - name: setup locallib
        run: |
          PERL_LOCAL_LIB_ROOT="$HOME/perl5"
          >>"$GITHUB_ENV" echo "PERL_LOCAL_LIB_ROOT=$PERL_LOCAL_LIB_ROOT"
          >>"$GITHUB_ENV" echo "PERL5LIB=$PERL_LOCAL_LIB_ROOT/lib/perl5"
          >>"$GITHUB_ENV" echo "PERL_MB_OPT=--install_base \"$PERL_LOCAL_LIB_ROOT/\""
          >>"$GITHUB_ENV" echo "PERL_MM_OPT=INSTALL_BASE=$PERL_LOCAL_LIB_ROOT"
          >>"$GITHUB_ENV" echo "PATH=$PERL_LOCAL_LIB_ROOT/bin:$PATH"
      - name: install cpanm
        run: cpan App::cpanminus
      - name: test cpanm
        run: cpanm -v XML::LibXML
      - name: Parse Rollout Settings XML to get the New Rollout Number
        id: NewRolloutNumber
        run: |  
         NEW_BRANCH_ROLLOUT_NUMBER="$(perl ${{ github.workspace }}/scripts/parseXMLfile.pl  -b "NEWBRANCH"  -f "${{ github.workspace }}/scripts/rollout_gen/generic/rollout_settings.xml")"
         echo "NEW_BRANCH_ROLLOUT_NUMBER : $NEW_BRANCH_ROLLOUT_NUMBER"
         echo "NEW_BRANCH_ROLLOUT_NUMBER=$NEW_BRANCH_ROLLOUT_NUMBER" >> "$GITHUB_OUTPUT"
      # echo "$(   $ROLNB)" >> "$GITHUB_OUTPUT"
        #perl ${{ github.workspace }}/scripts/parseXMLfile.pl \
        #     -b "NEWBRANCH" \
         #    -f "${{ github.workspace }}/scripts/rollout_gen/generic/rollout_settings.xml"  >> $GITHUB_OUTPUT
      #-b "${{ steps.saveBranchName.outputs.BRANCH_NAME }}" \
      - name:  Print New Rollout Number
        shell: bash
        run: |  
          echo "New Rollout Number = ${{ steps.NewRolloutNumber.outputs.ROLNB }}" 
      # commit changes to main branch and switch to branch 

      # set the new rollout number in the BranchRolloutNumber.xml
    outputs:
      NEW_BRANCH_ROLLOUT_NUMBER: ${{ steps.NewRolloutNumber.outputs.NEW_BRANCH_ROLLOUT_NUMBER }} 

#########################################################################################
#                       CreatingRolloutPackageJob                                       #
#########################################################################################   
  CreatingRolloutPackageJob:
    name: CreatingRolloutPackageJob
    needs: [GetBranchRolloutNumberJob,GettingANewRolloutNumberJob]
    if: always() && !cancelled() && contains(needs.*.result, 'success')
    runs-on: macos-latest
    steps:
      - run: |
         if ${{ needs.GettingANewRolloutNumberJob.outputs.NEW_BRANCH_ROLLOUT_NUMBER != '' }}; then
          echo "NEW ROLLOUT_NUMBER_VALUE is created"
          echo "ROLLOUT_NUMBER_VALUE=${{needs.GettingANewRolloutNumberJob.outputs.NEW_BRANCH_ROLLOUT_NUMBER}}"  
         else
          echo "Current ROLLOUT_NUMBER_VALUE"
          echo "ROLLOUT_NUMBER_VALUE=${{ needs.GetBranchRolloutNumberJob.outputs.CURRENT_BRANCH_ROLLOUT_NUMBER }}"
         fi 
    
        
      
     
