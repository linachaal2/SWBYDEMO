name: Create BY Rollout Package TAR File
on:
  pull_request:
    branches:
      - main
 # workflow_dispatch:
  workflow_call:
    inputs:
       customer_name:
        description: 'Customer Name'
        required: true
        type: string
        default: 'RFH'
#on: workflow_dispatch
permissions:
  pull-requests: write
  contents: write
  
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true  
jobs:
  GetBranchRolloutNumberJob:
    name: GetBranchRolloutNumberJob
    runs-on: ubuntu-latest #macos-latest
    steps:
      - run: echo "Call =========> GetBranchRolloutNumberJob"
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0 
      # Get Customer Name 
      - name: Get Customer Var
        id: get_customer-name
        shell: bash
        run: |
          if ${{ vars.CUSTOMER_NAME != '' }}; then
            echo "CUSTOMER_NAME=${{ vars.CUSTOMER_NAME }}"  >> $GITHUB_OUTPUT
          else
            echo "CUSTOMER_NAME=${{ github.event.inputs.customer_name }}"  >> $GITHUB_OUTPUT
          fi
    #  - name: Print Customer Var
    #    run: |        
    #     echo "${{ steps.get_customer-name.outputs.CUSTOMER_NAME }}"
          
      # Need to check if the commit message contain the bump versioning type  
      - name: Get Head Commit Message
        id: get_head_commit_message
        run: echo "HEAD_COMMIT_MESSAGE=$(git show -s --format=%s)" >> "$GITHUB_OUTPUT"   
      - uses: actions-ecosystem/action-regex-match@v2
        id: regex-match
        with:
          text: ${{ steps.get_head_commit_message.outputs.HEAD_COMMIT_MESSAGE }}
          regex: '(?<=#)\S*'    
      - name: Print regex value      
        run: |     
           echo "print match value:${{ steps.regex-match.outputs.match }}" 
      - name: Get the bump type from GIT commit message
        id: get_release_bump_type
        shell: bash
        run: |
          if ${{ steps.regex-match.outputs.match != '' }}; then
            echo "HASH_BUMP_VALUE=${{ steps.regex-match.outputs.match }}"  >> $GITHUB_OUTPUT
          else
            echo "HASH_BUMP_VALUE='patch'"  >> $GITHUB_OUTPUT
          fi    
      - name: Print release bump value      
        run: |     
           echo "Final Bump Value: ${{ steps.get_release_bump_type.outputs.HASH_BUMP_VALUE }}"
    
      # Determine the next version without tagging the branch
      - name: Bump version for each merge
        id: taggerDryRun
        uses: anothrNick/github-tag-action@1.67.0
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         DEFAULT_BRANCH: ${{ github.head_ref }}
         WITH_V: true
         DEFAULT_BUMP: ${{ steps.get_release_bump_type.outputs.HASH_BUMP_VALUE }} 
         DRY_RUN: true
         
      - name: Echo new tag
        run: |
         echo "The next tag version will be: ${{ steps.taggerDryRun.outputs.new_tag }}"
      - name: Echo current tag
        run: |
         echo "The current tag is: ${{ steps.taggerDryRun.outputs.tag }}"
      - name: Echo part
        run: |
         echo "The version increment was: ${{ steps.taggerDryRun.outputs.part }}"         
              
      # Save Branch Name, branch name will be used later if we switch to main branch       
      - name:  Current Branch Name 
        id: CurrentBranchName
        shell: bash
        run: |  
          echo "BRANCH_NAME=${{ github.head_ref }}"  >> $GITHUB_OUTPUT
      - name:  Print Branch Name 
        shell: bash
        run: |  
          echo "BRANCH_NAME=${{ steps.saveBranchName.outputs.BRANCH_NAME }}"      
      # Validate the rollout number for current branch
      - name: Parse BranchRolloutNumber XML
        id: getCurrentBranchRolloutNumberEX
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
         xml-file: 'scripts/rollout_gen/generic/BranchRolloutNumber.xml'
         xpath: '//branch_rollout_number'
      - name: Print Current Branch Rollout Number
        id: CurRolloutNumberEX
        shell: bash
        run: |   
         echo "Current Branch Rollout Number: ${{ steps.getCurrentBranchRolloutNumberEX.outputs.info }}"
         echo "CURRENT_BRANCH_ROLLOUT_NUMBER='${{ steps.getCurrentBranchRolloutNumberEX.outputs.info }}'" >> "$GITHUB_OUTPUT"
         echo "CURRENT_BRANCH_ROLLOUT_NUMBER : $CURRENT_BRANCH_ROLLOUT_NUMBER"   
      
     # - id: CurRolloutNumberEX
     #   run: |
     #    CURRENT_BRANCH_ROLLOUT_NUMBER="X"
     #    echo "CURRENT_BRANCH_ROLLOUT_NUMBER='X'" >> "$GITHUB_OUTPUT"
     #    echo "CURRENT_BRANCH_ROLLOUT_NUMBER : $CURRENT_BRANCH_ROLLOUT_NUMBER"
        #  echo "run_job_b='hello world'" >> $GITHUB_OUTPUT
    outputs:
      CURRENT_BRANCH_ROLLOUT_NUMBER: ${{ steps.CurRolloutNumberEX.outputs.CURRENT_BRANCH_ROLLOUT_NUMBER }}
      NEW_TAG: ${{ steps.taggerDryRun.outputs.new_tag }}
      HASH_BUMP_VALUE: ${{ steps.get_release_bump_type.outputs.HASH_BUMP_VALUE }}
      BRANCH_NAME: ${{ steps.saveBranchName.outputs.BRANCH_NAME }}
      CUSTOMER_NAME: ${{ steps.get_customer-name.outputs.CUSTOMER_NAME }}
  GettingANewRolloutNumberJob:
    name: GettingANewRolloutNumberJob
    runs-on: ubuntu-latest
    needs: GetBranchRolloutNumberJob
    if: contains(needs.GetBranchRolloutNumberJob.outputs.CURRENT_BRANCH_ROLLOUT_NUMBER, 'X')
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0 
      - name: perl info
        run: |
          perl --version
      - name: setup locallib
        run: |
          PERL_LOCAL_LIB_ROOT="$HOME/perl5"
          >>"$GITHUB_ENV" echo "PERL_LOCAL_LIB_ROOT=$PERL_LOCAL_LIB_ROOT"
          >>"$GITHUB_ENV" echo "PERL5LIB=$PERL_LOCAL_LIB_ROOT/lib/perl5"
          >>"$GITHUB_ENV" echo "PERL_MB_OPT=--install_base \"$PERL_LOCAL_LIB_ROOT/\""
          >>"$GITHUB_ENV" echo "PERL_MM_OPT=INSTALL_BASE=$PERL_LOCAL_LIB_ROOT"
          >>"$GITHUB_ENV" echo "PATH=$PERL_LOCAL_LIB_ROOT/bin:$PATH"
      - name: install cpanm
        run: cpan App::cpanminus
      - name: test cpanm
        run: cpanm -v XML::LibXML
      - id: NewRolloutNumber
        run: |
         echo "Call =========> GettingANewRolloutNumberJob"
         NEW_BRANCH_ROLLOUT_NUMBER="$(perl ${{ github.workspace }}/scripts/parseXMLfile.pl  -b "NEWBRANCH"  -f "${{ github.workspace }}/scripts/rollout_gen/generic/rollout_settings.xml")"
         echo "NEW_BRANCH_ROLLOUT_NUMBER : $NEW_BRANCH_ROLLOUT_NUMBER"
         echo "NEW_BRANCH_ROLLOUT_NUMBER=$NEW_BRANCH_ROLLOUT_NUMBER" >> "$GITHUB_OUTPUT"
        # echo "NEW_BRANCH_ROLLOUT_NUMBER : $NEW_BRANCH_ROLLOUT_NUMBER" >> "$GITHUB_OUTPUT"
        # echo "NEW_BRANCH_ROLLOUT_NUMBER : $NEW_BRANCH_ROLLOUT_NUMBER"
      - name:  Print New Rollout Number
        shell: bash
        run: |  
          echo "New Rollout Number = ${{ steps.NewRolloutNumber.outputs.NEW_BRANCH_ROLLOUT_NUMBER }}"  
    outputs:
      NEW_BRANCH_ROLLOUT_NUMBER: ${{ steps.NewRolloutNumber.outputs.NEW_BRANCH_ROLLOUT_NUMBER }}    
  CreatingRolloutPackageJob:
    name: CreatingRolloutPackageJob
    runs-on: ubuntu-latest
    needs: [GetBranchRolloutNumberJob,GettingANewRolloutNumberJob]
    if: always() && !cancelled() && contains(needs.*.result, 'success')
    steps:
      - run: |
         echo "Call =========> CreatingRolloutPackageJob"
         if ${{ needs.GettingANewRolloutNumberJob.outputs.NEW_BRANCH_ROLLOUT_NUMBER != '' }}; then
          echo "NEW ROLLOUT_NUMBER_VALUE is created"
          echo "NEW_BRANCH_ROLLOUT_NUMBER=${{needs.GettingANewRolloutNumberJob.outputs.NEW_BRANCH_ROLLOUT_NUMBER}}"  
         else
          echo "Current ROLLOUT_NUMBER_VALUE"
          echo "CURRENT_BRANCH_ROLLOUT_NUMBER=${{needs.GetBranchRolloutNumberJob.outputs.CURRENT_BRANCH_ROLLOUT_NUMBER}}"
          echo "NEW_TAG=${{needs.GetBranchRolloutNumberJob.outputs.NEW_TAG}}"
          echo "HASH_BUMP_VALUE=${{needs.GetBranchRolloutNumberJob.outputs.HASH_BUMP_VALUE}}"
          echo "BRANCH_NAME=${{needs.GetBranchRolloutNumberJob.outputs.BRANCH_NAME}}"
          echo "CUSTOMER_NAME=${{needs.GetBranchRolloutNumberJob.outputs.CUSTOMER_NAME}}"
         fi 
